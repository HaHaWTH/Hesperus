buildscript {
    repositories {
        jcenter()

        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'http://files.minecraftforge.net/maven' }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

group = "me.jellysquid.mods"

if (System.getenv("BUILD_NUMBER") != null) {
    version = "${minecraft_version}-${mod_version}+build${System.getenv("BUILD_NUMBER")}"
} else {
    version = "${minecraft_version}-${mod_version}-SNAPSHOT"
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "run"

    mappings = forge_mappings

    def args = "-Dfml.coreMods.load=me.jellysquid.mods.phosphor.core.PhosphorFMLLoadingPlugin"

    clientJvmArgs += args
    serverJvmArgs += args

    makeObfSourceJar = false
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
    maven {
        url "https://www.cursemaven.com"
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    deobfCompile "curse.maven:dynamiclights-227874:2563244"
    shade('org.spongepowered:mixin:0.8') {
        transitive = false
    }
}

def coreModManifest = {
    attributes "FMLAT": "phosphor_at.cfg"
    attributes "Maven-Artifact": "${group}:${name}:${version}"
    attributes "FMLCorePlugin": "me.jellysquid.mods.phosphor.core.PhosphorFMLLoadingPlugin"
    attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
    attributes "TweakOrder": 0
    attributes "FMLCorePluginContainsFMLMod": true
    attributes "ForceLoadAsMod": true
}

jar {
    classifier = 'universal'

    manifest coreModManifest

    from sourceSets.main.output

    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            rename 'LICENSE.txt', 'org/spongepowered/LICENSE.txt'

            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.RSA'
            exclude 'META-INF/*.MF'

            exclude '**/*.html'
        }
    }


    rename '(.+_at.cfg)', 'META-INF/$1'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'

    manifest coreModManifest

    from sourceSets.main.allSource
}

task deobfJar(type: Jar, dependsOn: reobfJar) {
    classifier = 'dev'

    manifest coreModManifest

    from sourceSets.main.output
}

import net.minecraftforge.gradle.user.TaskExtractAnnotations

task deobfJarExtractAnnotations(type: TaskExtractAnnotations, dependsOn: deobfJar) {
    jar = deobfJar.archivePath
}

deobfJar.finalizedBy deobfJarExtractAnnotations

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

mixin {
    add sourceSets.main, "mixins.phosphor.refmap.json"
}

build.dependsOn deobfJar, sourcesJar
